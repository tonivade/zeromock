plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id "org.sonarqube" version "3.2.0"
  id "com.diffplug.oomph.ide" version "3.29.1"
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

apply from: 'gradle/deps.gradle'

apply plugin: 'org.sonarqube'

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: 'com.diffplug.eclipse.apt'

  group = 'com.github.tonivade'
  version = '0.15.0-SNAPSHOT'

  sourceCompatibility = 11
  targetCompatibility = 11
  
  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
  }

  jacoco {
    toolVersion = '0.8.6'
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
      xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
  }
}

subprojects {
  test {
    useJUnitPlatform()

    jacoco {
      destinationFile = file("${buildDir}/jacoco/test.exec")
    }

    reports.html.enabled = false
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        
        from components.java

        pom {
          name = "ZeroMock-${project.name}"
          description = "Mock Http Server (mostly) without dependencies"
          url = "https://github.com/tonivade/zeromock"
          inceptionYear = '2018'

          scm {
            url = 'https://github.com/tonivade/zeromock'
            connection = 'scm:https://github.com/tonivade/zeromock.git'
            developerConnection = 'scm:git://github.com/tonivade/zeromock.git'
          }

          licenses {
            license {
              name = 'The MIT License (MIT)'
              url = 'https://github.com/tonivade/zeromock/blob/master/LICENSE'
              distribution = 'repo'
            }
          }

          developers {
            developer {
              id = 'tonivade'
              name = 'Antonio Mu√±oz'
              email = 'antoniogmc@gmail.com'
            }
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.mavenJava
  }
  
  tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
  }

  dependencies {
    testImplementation libs.junitJupiter
    testImplementation libs.junitVintage
    testRuntimeOnly libs.junitRunner
  }
}

nexusPublishing {
  repositories {
    sonatype {
      
      stagingProfileId = '19a96b937cdb5'
      
      username = project.findProperty('nexusUsername')  
      password = project.findProperty('nexusPassword')
    }
  }
  
  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(java.time.Duration.ofMillis(3000))
  }
}

def publishedProjects = subprojects.findAll()

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'

  dependsOn(publishedProjects.test)

  additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(publishedProjects.sourceSets.main.output)
  executionData.from = files(publishedProjects.jacocoTestReport.executionData).findAll { it.exists() }

  reports {
    html.enabled = true
    xml.enabled = true
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
  }
}

task fullTestReport(type: TestReport, group: 'Html Report with all the tests', dependsOn: check) {
  destinationDir = file("$buildDir/reports/allTests")

  reportOn subprojects*.test
}